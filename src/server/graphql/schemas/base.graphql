type User {
  id: Int
  firstName: String
  lastName: String
  email: String
  username: String
}

type Topic {
  id: Int
  title: String
  description: String
  createdBy: User
  parent: Topic
  childTopics: [Topic]
  messages: [Message]
}

type Message {
  id: Int
  title: String
  body: String
  createdBy: User
  parent: Topic
  replies: [Message]
}

type Query {
  topics(topicId: ID): [Topic]
  topTopics: [Topic]
  messages(topicId: ID!): [Message]
  user(token: ID): User
}


"""
The **AuthPayload** returns a token to be saved for later requests and the user that was authenticated
"""
type AuthPayload {
  token: String
  user: User
}

"""
The **NewUserInput** is the data required for a new user to be created
"""
input NewUserInput {
  firstName: String!
  lastName: String!
  email: String!
  username: String!
  password: String!
}

"""
The **EditUserInput** is the data required for a new user to be created
"""
input EditUserInput {
  firstName: String!
  lastName: String!
  email: String!
  username: String!
}

"""
The **LoginInput** is the data required for a user to login
"""
input LoginInput {
  email: String!
  password: String!
}

type Mutation {

  """
  **signup** allows user to create an account
  """
  signup(
    newUserInput: NewUserInput!
  ): AuthPayload!

  """
  **login** allows a user to authenticate
  """
  login(loginInput: LoginInput!): AuthPayload!
}